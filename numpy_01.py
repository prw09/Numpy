# -*- coding: utf-8 -*-
"""Numpy-01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tkHj3basMw-lyHOdltj3PeBztZNe4xX_

### What is numpy?

NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.


At the core of the NumPy package, is the ndarray object. This encapsulates n-dimensional arrays of homogeneous data types

# **Numpy**
"""

import numpy as np

"""### Numpy Arrays Vs Python Sequences

- NumPy arrays have a fixed size at creation, unlike Python lists (which can grow dynamically). Changing the size of an ndarray will create a new array and delete the original.

- The elements in a NumPy array are all required to be of the same data type, and thus will be the same size in memory.

- NumPy arrays facilitate advanced mathematical and other types of operations on large numbers of data. Typically, such operations are executed more efficiently and with less code than is possible using Pythonâ€™s built-in sequences.

- A growing plethora of scientific and mathematical Python-based packages are using NumPy arrays; though these typically support Python-sequence input, they convert such input to NumPy arrays prior to processing, and they often output NumPy arrays.

# Creating a numpy arr
"""

# Numpy array
arr = np.array([1,2,3])
arr

# 2D Numpy array

arr = np.array([[1,2,3], [5,6,7]])
arr

# 3D Numpy array

arr = np.array([[[1,2,3], [5,6,7]], [[1,2,3], [5,6,7]]])
arr

# Dtype
# You make array of your choice

arr = np.array([1,2,3], dtype=float)
arr

arr = np.array([1,2,3], dtype=bool)
arr

arr.ndim

arr.shape

# np.arange
# makes a array of given range

arr = np.arange(1,15)
arr

# with reshape

arr1 = np.arange(1,17).reshape(4,4)
arr1

arr1.ndim # tells wherther the array is in which dimension

arr1.shape

np.arange(1,9).reshape(2,4)

# used in deep learning
np.ones((3,4))

np.zeros((3,4))

np.random.random((3,4))

# Linspace
# used for machine learning results plotting

np.linspace(-10,10,10).round(2)

# identity matrix
np.identity(3)

# 4D Array
np.arange(16).reshape(2,2,2,2)

"""# **Array Attributes**"""

array_1d = np.arange(10,dtype=np.int32)
array_2d = np.arange(12,dtype=float).reshape(3,4)
array_3d = np.arange(8).reshape(2,2,2)

# Ndim
array_1d.ndim

array_2d.shape

# changing datatype
# astype

array_1d.astype(np.int32)

# here it is converted to int-32

array_3d

"""### **Array Operations**"""

arr1 = np.arange(12).reshape(3,4)
arr2 = np.arange(12, 24).reshape(3,4)

arr1

arr2

arr = np.arange(6).reshape(2, 3).astype(float)
arr

# Vector ops
sqaure_of_arr = arr*arr

# Sum of arrays

arr1 + arr2

arr1 - arr2

# Scalar operations

arr1 * 2

arr1 ** 2

# Relationals operators

arr2 > 20

arr2 == 16

"""## **Array Functions**"""

array1 = np.random.random((3,3))
 array1 = np.round(array1*100)
 array1

np.max(array1)

np.min(array1)

np.prod(array1)

#  0 -> col and 1 -> row

np.min(array1, axis=1)

np.max(array1, axis=0)

np.max(array1, axis=1).round(0)

"""# **Statistical ops**"""

np.mean(array1).round(2)

np.var(array1).round(2)

np.median(array1).round(2)

np.std(array1).round(2)

# trigonometric func

np.sin(array1)

# Dot product
#

arr1 = np.arange(12).reshape(3,4)
arr2 = np.arange(12, 24).reshape(4,3)

arr1.dot(arr2)

"""# **Indexing and Slicing**"""

a1 = np.arange(10)
a2 = np.arange(12).reshape(3,4)
a3 = np.arange(8).reshape(2,2,2)

a1

a1[4]

a2

a2[1,2]

a2[1,0]

a2[2, 2]

a2[1,3]

a2[2,0]

a1[5:8] = 12
a1

a1_slice = a1[5:8]
a1_slice

a1_slice[2] = 23333

a1_slice

a1

# Priniting the 3d tensor
a3

a3[1, 1, 1] # printing 7

a3[0, 0, 0] # printing 0

a3[1,1,0] # printing 6

# Slicing
a1

a1[2:5]

a1[2:5:2]

a2

a2[0, :]

a2[1, :]

a2[:, 2]

a2[1:, 1:3]

a2[1:2, 2:]

a2[2:, 1:3]

a2

a2[::2,::3]

a2[::2, ::2]

a2[1, ::3]

a2[::2, 1::2]

a2[0:2, 1:]

a3

a3 = np.arange(27).reshape(3,3,3)
a3

a3[0,1,:]

a3[1,:,1]

a3[2,1:,1:]

a3[::2, 0, ::2]

# Transpose

arr = np.arange(16).reshape(4,4)
arr

arr.transpose()

# Ravel
a3.ravel()

a2.ravel()

#  Stacking

# Horizontally

a4 = np.arange(12).reshape(3,4)
a5 = np.arange(12,24).reshape(3,4)

np.hstack((a4,a5,a2))

# Vertically

np.vstack((a4,a5,a2))

# Splitting

np.hsplit(a4,4)





